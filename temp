package org.openjfx;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
//import javafx.scene.paint.Paint;
import javafx.stage.Stage;

import java.lang.Math;

public class App extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {

        Canvas canvas = new Canvas(900, 600);
        GraphicsContext GC = canvas.getGraphicsContext2D();

        Pane pane = new Pane(canvas);
        Scene scene = new Scene(pane);

        //MyOval shape1 = new MyOval(150, 150, 50, 100, MyColor.BLUE);
        MyRectangle shape2 = new MyRectangle(50, 50, 100.0, 100.0, MyColor.BLACK);
        MyPoint p1 = new MyPoint(300, 300, MyColor.BLUE);
        p1.Draw(GC);

        shape2.Draw(GC);
        //shape1.Draw(GC);

        primaryStage.setScene(scene);
        primaryStage.setTitle("My Window");
        primaryStage.show();
    
        System.out.println(shape2.toString());  
    }
}





class MyPoint {
    
    //private variables
    private double x, y;
    private MyColor color;

    //constructors
    MyPoint() {
        SetX(0.0);
        SetY(0.0);
        SetColor(MyColor.BLACK);
    }

    MyPoint(double x, double y) {
        SetX(x);
        SetY(y);
        SetColor(MyColor.BLACK);
    }

    MyPoint(double x, double y, MyColor color) {
        SetX(x);
        SetY(y);
        SetColor(color);
    }

    //set Methods
    public void SetX(double x) {
        this.x = x;
    }

    public void SetY(double y) {
        this.y = y;
    }

    public void SetColor(MyColor color) {
        this.color = color;
    }

    //get methods
    public final double GetX() {
        return this.x;
    }

    public final double GetY() {
        return this.y;
    }

    public final MyColor GetColor() {
        return this.color;
    }

    //shift point
    public void ShiftPoint(double xShift, double yShift) {
        SetX(this.x += xShift);
        SetY(this.y += yShift);
    }

    public void ShiftXValue(double xShift) {
        SetX(this.x += xShift);
    }

    public void ShiftYValue(double yShift) {
        SetY(this.y += yShift);
    }

    //distance
    public final double DistanceFromOrigin() {
        return Math.round(Math.sqrt(Math.pow(this.x, 2.0) + Math.pow(this.y, 2.0)));
    }

    public final double DistanceFromAnotherPoint(MyPoint secondPoint) {
        return Math.round(Math.sqrt(Math.pow((secondPoint.GetX() - this.x), 2.0) + Math.pow((secondPoint.GetY() - this.y), 2.0)));
    }

    //angle (in degrees) with the x-axis of the line extending from this point to another point
    public final double AngleRelativeToXAxis(MyPoint secondPoint) {
        return Math.toDegrees(Math.atan2(secondPoint.GetY() - this.y, secondPoint.GetX() - this.x));
    }

    //draw point
    public void Draw(GraphicsContext GC) {
        GC.setFill(GetColor().GetJavaFXColor());
        GC.fillOval(GetX(), GetY(), 1, 1);
    }

    //String representation of the point; it's coordinates
    @Override
    public String toString() {
        return "Point (" + this.x + ", " + this.y + ")\n";
    }
}




enum MyColor {

    //Colors
    BLACK(0, 0, 0, 255),
    WHITE(255, 255, 255, 255),
    RED(255, 0, 0, 255),
    LIME(0, 255, 0, 255),
    BLUE(0, 0, 255, 255),
    YELLOW(255, 255, 0, 255),
    CYAN(0, 255, 255, 255),
    MAGENTA(255, 0, 255, 255),
    SILVER(192, 192, 192, 255),
    GRAY(128, 128, 128, 255),
    MAROON(128, 0, 0, 255),
    OLIVE(128, 128, 0, 255),
    GREEN(0, 128, 0, 255),
    PURPLE(128, 0, 128, 255),
    TEAL(0, 128, 128, 255),
    NAVY(0, 0, 128, 255),
    TOMATO(255, 99, 71, 255),
    SALMON(250, 128, 114, 255),
    ORANGE(255, 69, 0, 255),
    TURQUOISE(0, 206, 209, 255),
    VIOLET(138, 43, 226, 255),
    PINK(255, 192, 203, 255),
    BROWN(139, 69, 19, 255),
    STEEL(119, 136, 153, 255);

    //variables
    private int R, G, B, A, RGBA;

    //constructor
    MyColor(int R, int G, int B, int A) {
        SetR(R);
        SetG(G);
        SetB(B);
        SetA(A);
        SetRGBA(R, G, B, A);
    }   

    //set methods
    public void SetR(int R) {
        this.R = R;
    }

    public void SetG(int G) {
        this.G = G;
    }

    public void SetB(int B) {
        this.B = B;
    }

    public void SetA(int A) {
        this.A = A;
    }

    //get methods
    public final int GetR() {
        return this.R;
    }

    public final int GetG() {
        return this.G;
    }

    public final int GetB() {
        return this.B;
    }

    public final int GetA() {
        return this.A;
    }

    public final int GetRGBA() {
        return this.RGBA;
    }

    //convert opacity from an int 0 - 255 into a double 0.0 - 1.0
    public double SetOpacityToDouble() {
        return GetA() / 255;
    }

    //packed color word
    public void SetRGBA(int R, int G, int B, int A) {
        this.RGBA = (R << 24) & 0xFF000000 | (G << 16) & 0x00FF0000 | (B << 8) & 0x0000FF00 | A;
    }

    //rgb to hex code
    public String GetHexCode() {
        return "#" + Integer.toHexString(GetRGBA()).toUpperCase();
    }

    //return a javafx color object to use with javafx graphics context
    public Color GetJavaFXColor() {
        return Color.rgb(GetR(), GetG(), GetB(), SetOpacityToDouble());
    }

    @Override
    public String toString() {
        return "Color picked: " + GetHexCode();
    }
}


class MyShape {

    //variables
    private MyPoint refPoint;
    private MyColor color;

    private double area, perimeter;

    //constructors
    MyShape() {
        SetColor(MyColor.BLACK);
        refPoint = new MyPoint(0, 0);

        SetArea(0.0);
        SetPerimeter(0.0);
    }

    MyShape(int x, int y, MyColor color) {
        SetColor(color);
        refPoint = new MyPoint(x, y, color);
        
        SetArea(0.0);
        SetPerimeter(0.0);
    }

    //set methods
    public void SetRefPoint(int x, int y) {
        this.refPoint.SetX(x);
        this.refPoint.SetY(y);
    }

    public void SetColor(MyColor color) {
        this.color = color;
    }

    public void SetPerimeter(double perimeter) {
        this.perimeter = perimeter;
    }

    public void SetArea(double area) {
        this.area = area;
    }

    //get methods
    public MyPoint GetRefPoint() {
        return refPoint;
    }

    public MyColor GetColor() {
        return color;
    }
    
    //returns perimeter of MyShape (currently 0)
    public double GetPerimeter() {
        return perimeter;
    }

    //returns area of MyShape (currently 0)
    public double GetArea() {
        return area;
    }

    //draws MyShape object (fills the canvas with color)
    public void Draw(GraphicsContext GC) {
        GC.setFill(GetColor().GetJavaFXColor());
        GC.fillRect(0, 0, GC.getCanvas().getWidth(), GC.getCanvas().getHeight());
    }

    //returns a description of my shape as a string type
    @Override
    public String toString() {
        return "My shape has reference point (" + refPoint.GetX() + ", " + refPoint.GetY() + ") and color: " + color.GetHexCode();
    }
}




class MyRectangle extends MyShape {

    //variables
    private double width, height;

    //constructors
    MyRectangle() {
        
        super();

        SetWidth(200.0);
        SetHeight(100.0);

        super.SetPerimeter(GetPerimeter());
        super.SetArea(GetArea());
    }

    MyRectangle(double width, double height) {
        
        super();

        SetWidth(width);
        SetHeight(height);

        super.SetPerimeter(GetPerimeter());
        super.SetArea(GetArea());
    }

    MyRectangle(int x, int y, double width, double height, MyColor color) {

        super(x, y, color);

        SetWidth(width);
        SetHeight(height);

        super.SetPerimeter(GetPerimeter());
        super.SetArea(GetArea());
    }

    //set methods
    public void SetWidth(double width) {
        this.width = width;
    }

    public void SetHeight(double height) {
        this.height = height;
    }

    //get methods
    @Override
    public MyPoint GetRefPoint() {
        return super.GetRefPoint();
    }

    @Override
    public MyColor GetColor() {
        return super.GetColor();
    }

    public final double GetWidth() {
        return width;
    }

    public final double GetHeight() {
        return height;
    }

    //perimeter of rectangle
    @Override
    public double GetPerimeter() {
        return (GetHeight() * 2) + (GetWidth() * 2);
    }

    //area of rectangle
    @Override
    public double GetArea() {
        return GetHeight() * GetWidth();
    }

    @Override
    public void Draw(GraphicsContext GC) {
        GC.setFill(GetColor().GetJavaFXColor());
        GC.fillRect(GetRefPoint().GetX(), GetRefPoint().GetY(), GetWidth(), GetHeight());
    }

    //string representation of the rectangle's properties
    @Override
    public String toString() {
        return "My rectangle's properties: \n" +
               "Reference Point: (" + GetRefPoint().GetX() + ", " + GetRefPoint().GetY() + ") \n" +
               "Width: " + GetWidth() + "\n" + 
               "Height: " + GetHeight() + "\n" +
               "Perimeter: " + GetPerimeter() + "\n" +
               "Area: " + GetArea();
    }
}

/* 

class MyOval extends MyShape {

    //variables
    private double width, height, majorAxis, minorAxis;

    MyOval() {
        super();

        width = 100;
        height = 100;

        if (this.width < this.height) {
            majorAxis = height / 2;
            minorAxis = width / 2;
        } else if (this.width >= this.height) {
            majorAxis = width / 2;
            minorAxis = height / 2;
        } 

        //figure out perimeter and area of ellipse
    }

    MyOval(double width, double height) {
        super();

        this.width = width;
        this.height = height;

        if (this.width < this.height) {
            majorAxis = height / 2;
            minorAxis = width / 2;
        } else if (this.width >= this.height) {
            majorAxis = width / 2;
            minorAxis = height / 2;
        } 

        //figure out perimeter and area
    }

    MyOval(int x, int y, double width, double height, MyColor color) {
        super(x, y, color);

        this.width = width;
        this.height = height;

        if (this.width < this.height) {
            majorAxis = height / 2;
            minorAxis = width / 2;
        } else if (this.width >= this.height) {
            majorAxis = width / 2;
            minorAxis = height / 2;
        } 

        //perimeter and area
    }

    //set methods
    public void SetWidth(double width) {
        this.width = width;
    }

    public void SetHeight(double height) {
        this.height = height;
    }
    
    //get methods
    public double GetWidth() {
        return this.width;
    }

    public double GetHeight() {
        return this.height;
    }

    //set ref point to center of oval
    public double GetNewX() {
        return super.refPoint.GetX() - (width / 2);
    }

    public double GetNewY() {
        return super.refPoint.GetY() - (height / 2);
    }

    //get center point
    public MyPoint GetCenterPoint() {
        super.refPoint.SetX(GetNewX());
        super.refPoint.SetY(GetNewY());

        return super.refPoint;
    }
*/
    /* 
    @Override
    //Perimeter
    public double Area() {
        
    }
    */
/* 
    //draw method
    @Override
    public void Draw(GraphicsContext GC) {
        GC.setFill(super.color.GetJavaFXColor());
        GC.fillOval(GetNewX(), GetNewY(), GetWidth(), GetHeight());
    }

}

*/

/* 
   //get methods
    public final int GetR() {
        return this.R;
    }

    public final int GetG() {
        return this.G;
    }

    public final int GetB() {
        return this.B;
    }

    public final double GetA() {
        return this.A;
    }    
*/
