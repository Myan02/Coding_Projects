package org.openjfx;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.paint.Paint;
import javafx.stage.Stage;

import java.lang.Math;

public class App extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {

        Canvas canvas = new Canvas(450, 300);
        GraphicsContext GC = canvas.getGraphicsContext2D();

        Pane pane = new Pane(canvas);
        Scene scene = new Scene(pane);

        MyPoint myPoint = new MyPoint(100, 50);
        MyPoint yourPoint = new MyPoint(50, 40);

        myPoint.Draw(GC);
        yourPoint.Draw(GC);

        primaryStage.setScene(scene);
        primaryStage.setTitle("My Window");
        primaryStage.show();


        System.out.println(myPoint.toString());
        
    }
}

class MyPoint {
    
    //private variables
    private double x;
    private double y;

    MyColor myColor = MyColor.BLACK;

    //constructors
    MyPoint() {
        this.x = 0;
        this.y = 0;
    }

    MyPoint(double x, double y) {
        this.x = x;
        this.y = y;
    }

    //set Methods
    public void SetX(double x) {
        this.x = x;
    }

    public void SetY(double y) {
        this.y = y;
    }

    //get methods
    public final double GetX() {
        return this.x;
    }

    public final double GetY() {
        return this.y;
    }

    //shift point
    public void ShiftPoint(double xShift, double yShift) {
        this.x += xShift;
        this.y += yShift;
    }

    public void ShiftXValue(double xShift) {
        this.x += xShift;
    }

    public void ShiftYValue(double yShift) {
        this.y += yShift;
    }

    //distance
    public final double DistanceFromOrigin() {
        return Math.round(Math.sqrt(Math.pow(this.x, 2.0) + Math.pow(this.y, 2.0)));
    }

    public final double DistanceFromAnotherPoint(MyPoint secondPoint) {
        return Math.round(Math.sqrt(Math.pow((secondPoint.GetX() - this.x), 2.0) + Math.pow((secondPoint.GetY() - this.y), 2.0)));
    }

    //angle (in degrees) with the x-axis of the line extending from this point to another point
    public final double AngleRelativeToXAxis(MyPoint secondPoint) {
        double theta = Math.atan2(secondPoint.GetY() - this.y, secondPoint.GetX() - this.x);
        return Math.toDegrees(theta);
    }

    //FIX DRAW TO INCLUDE MYCOLOR CLASS AND VARIABLES FOR W AND H
    //draw
    public void Draw(GraphicsContext GC) {
        GC.setFill(Color.rgb(2, 2, 2, 1));
        GC.fillOval(this.x, this.y, 5, 5);
    }

    //to string
    @Override
    public final String toString() {
        return "Point (" + this.x + ", " + this.y + ")\n";
    }
}

enum MyColor {

    //Colors
    BLACK(0, 0, 0, 1),
    WHITE(255, 255, 255, 1),
    RED(255, 0, 0, 1),
    GREEN(0, 255, 0, 1),
    BLUE(0, 0, 255, 1);

    //variables
    private int R, G, B;
    private double A;

    //constructor
    MyColor(int R, int G, int B, double A) {
        this.R = R;
        this.G = G;
        this.B = B;
        this.A = A;
    }

    //get methods
    public final int GetR() {
        return this.R;
    }

    public final int GetG() {
        return this.G;
    }

    public final int GetB() {
        return this.B;
    }

    public final double GetA() {
        return this.A;
    }
}
